/*
 * Decompiled with CFR 0.151.
 * 
 * Could not load the following classes:
 *  net.minecraft.entity.Entity
 *  net.minecraft.network.Packet
 *  net.minecraft.network.play.client.CPacketPlayer$Position
 *  net.minecraft.network.play.client.CPacketPlayer$PositionRotation
 *  net.minecraft.network.play.server.SPacketPlayerPosLook
 *  net.minecraftforge.fml.common.eventhandler.SubscribeEvent
 */
package cascade.features.modules.exploit;

import cascade.Cascade;
import cascade.event.events.PacketEvent;
import cascade.features.modules.Module;
import cascade.features.setting.Setting;
import cascade.util.entity.EntityUtil;
import cascade.util.misc.MathUtil;
import cascade.util.player.MovementUtil;
import cascade.util.player.PhysicsUtil;
import net.minecraft.entity.Entity;
import net.minecraft.network.Packet;
import net.minecraft.network.play.client.CPacketPlayer;
import net.minecraft.network.play.server.SPacketPlayerPosLook;
import net.minecraftforge.fml.common.eventhandler.SubscribeEvent;

public class PacketFly
extends Module {
    Setting<Float> factor = this.register(new Setting<Float>("Factor", Float.valueOf(1.2f), Float.valueOf(0.1f), Float.valueOf(10.0f)));
    Setting<Boolean> autoWalk = this.register(new Setting<Boolean>("AutoWalk", true));
    Setting<Boolean> onEdge = this.register(new Setting<Boolean>("OnEdge", false));
    Setting<Boolean> clip = this.register(new Setting<Boolean>("Clip", false));
    Setting<Boolean> teleport = this.register(new Setting<Boolean>("Teleport", false));
    Setting<Float> blocks = this.register(new Setting<Object>("Blocks", Float.valueOf(0.3f), Float.valueOf(0.0f), Float.valueOf(20.0f), v -> this.teleport.getValue()));
    Setting<Boolean> tickShift = this.register(new Setting<Boolean>("TickShift", false));
    Setting<Integer> ticks = this.register(new Setting<Object>("Ticks", Integer.valueOf(2), Integer.valueOf(1), Integer.valueOf(100), v -> this.tickShift.getValue()));
    Setting<Timer> timer = this.register(new Setting<Timer>("Timer", Timer.Strict));
    Setting<Rubberband> rubberband = this.register(new Setting<Rubberband>("Rubberband", Rubberband.None));
    int runs = 0;

    public PacketFly() {
        super("PacketFly", Module.Category.EXPLOIT, "lets u fll with packets");
    }

    @Override
    public void onToggle() {
        if (this.timer.getValue() != Timer.None) {
            Cascade.timerManager.reset();
        }
        this.runs = 0;
    }

    @Override
    public void onUpdate() {
        if (PacketFly.fullNullCheck()) {
            return;
        }
        if (!this.edge() && this.onEdge.getValue().booleanValue()) {
            return;
        }
        if (!EntityUtil.isMoving() && !this.autoWalk.getValue().booleanValue()) {
            return;
        }
        if (this.timer.getValue() != Timer.None) {
            Cascade.timerManager.set(this.timer.getValue() == Timer.Fast ? 1.15f : 1.0888f);
        }
        if (this.tickShift.getValue().booleanValue()) {
            if (this.runs < this.ticks.getValue()) {
                ++this.runs;
                PhysicsUtil.runPhysicsTick();
            } else {
                this.runs = 0;
            }
        }
        double cos = Math.cos(Math.toRadians(PacketFly.mc.thePlayer.rotationYaw + 90.0f));
        double sin = Math.sin(Math.toRadians(PacketFly.mc.thePlayer.rotationYaw + 90.0f));
        PacketFly.mc.thePlayer.setVelocity(0.0, 0.0, 0.0);
        MovementUtil.setMotion(0.0, 0.0, 0.0);
        if (this.clip.getValue().booleanValue()) {
            PacketFly.mc.thePlayer.noClip = true;
            PacketFly.mc.thePlayer.onGround = true;
            PacketFly.mc.thePlayer.isCollidedHorizontally = false;
            PacketFly.mc.thePlayer.capabilities.isFlying = false;
            PacketFly.mc.thePlayer.isCollidedVertically = false;
        }
        if (this.teleport.getValue().booleanValue()) {
            for (double x = 0.0625; x < (double)this.blocks.getValue().floatValue(); x += 0.262) {
                double[] dir = MathUtil.directionSpeed(x);
                PacketFly.mc.thePlayer.setLocationAndAngles(PacketFly.mc.thePlayer.posX + dir[0], PacketFly.mc.thePlayer.posY, PacketFly.mc.thePlayer.posZ + dir[1], PacketFly.mc.thePlayer.rotationYaw, PacketFly.mc.thePlayer.rotationPitch);
                mc.getNetHandler().addToSendQueue((Packet)new CPacketPlayer.Position(PacketFly.mc.thePlayer.posX + dir[0], PacketFly.mc.thePlayer.posY, PacketFly.mc.thePlayer.posZ + dir[1], PacketFly.mc.thePlayer.onGround));
            }
        }
        PacketFly.mc.thePlayer.setEntityBoundingBox(PacketFly.mc.thePlayer.getEntityBoundingBox().offset((double)this.factor.getValue().floatValue() / 10.0 * cos, 0.0, (double)this.factor.getValue().floatValue() / 10.0 * sin));
        if (PacketFly.mc.inGameHasFocus) {
            if (PacketFly.mc.gameSettings.keyBindJump.getIsKeyPressed()) {
                PacketFly.mc.thePlayer.motionY += 0.032;
            }
            if (PacketFly.mc.gameSettings.keyBindSneak.getIsKeyPressed()) {
                PacketFly.mc.thePlayer.motionY -= 0.032;
            }
        }
    }

    @SubscribeEvent
    public void onPacketReceive(PacketEvent.Receive e) {
        if (this.isDisabled()) {
            return;
        }
        if (e.getPacket() instanceof SPacketPlayerPosLook) {
            SPacketPlayerPosLook p = (SPacketPlayerPosLook)e.getPacket();
            switch (this.rubberband.getValue()) {
                case Desync: {
                    mc.getNetHandler().addToSendQueue((Packet)new CPacketPlayer.PositionRotation(PacketFly.mc.thePlayer.posX, PacketFly.mc.thePlayer.posY, PacketFly.mc.thePlayer.posZ, PacketFly.mc.thePlayer.rotationYaw, PacketFly.mc.thePlayer.rotationPitch, PacketFly.mc.thePlayer.onGround));
                    PacketFly.mc.thePlayer.setLocationAndAngles(PacketFly.mc.thePlayer.posX, PacketFly.mc.thePlayer.posY, PacketFly.mc.thePlayer.posZ, PacketFly.mc.thePlayer.rotationYaw, PacketFly.mc.thePlayer.rotationPitch);
                    break;
                }
                case Cancel: {
                    e.setCanceled(true);
                    break;
                }
                case Accept: {
                    mc.getNetHandler().addToSendQueue((Packet)new CPacketPlayer.PositionRotation(p.getX(), p.getY(), p.getZ(), PacketFly.mc.thePlayer.rotationYaw, PacketFly.mc.thePlayer.rotationPitch, PacketFly.mc.thePlayer.onGround));
                    PacketFly.mc.thePlayer.setLocationAndAngles(p.getX(), p.getY(), p.getZ(), PacketFly.mc.thePlayer.rotationYaw, PacketFly.mc.thePlayer.rotationPitch);
                }
            }
        }
    }

    @Override
    public void onLogout() {
        if (this.isEnabled()) {
            this.disable();
        }
    }

    public boolean edge() {
        return !PacketFly.mc.theWorld.getCollisionBoxes((Entity)PacketFly.mc.thePlayer, PacketFly.mc.thePlayer.getEntityBoundingBox().addCoord(-0.0625, 0.0, -0.0625)).isEmpty();
    }

    static enum Rubberband {
        None,
        Desync,
        Cancel,
        Accept;

    }

    static enum Timer {
        Strict,
        Fast,
        None;

    }
}

