/*
 * Decompiled with CFR 0.151.
 * 
 * Could not load the following classes:
 *  net.minecraft.client.entity.EntityPlayerSP
 *  net.minecraft.entity.Entity
 *  net.minecraft.network.Packet
 *  net.minecraft.network.play.client.CPacketEntityAction
 *  net.minecraft.network.play.client.CPacketInput
 *  net.minecraft.network.play.client.CPacketPlayer
 *  net.minecraft.network.play.client.CPacketPlayerAbilities
 *  net.minecraft.network.play.client.CPacketPlayerDigging
 *  net.minecraft.network.play.client.CPacketPlayerTryUseItem
 *  net.minecraft.network.play.client.CPacketPlayerTryUseItemOnBlock
 *  net.minecraft.network.play.client.CPacketUseEntity
 *  net.minecraft.network.play.client.CPacketVehicleMove
 *  net.minecraft.network.play.server.SPacketDestroyEntities
 *  net.minecraft.network.play.server.SPacketDisconnect
 *  net.minecraft.network.play.server.SPacketMoveVehicle
 *  net.minecraft.network.play.server.SPacketSetPassengers
 *  net.minecraft.network.play.server.SPacketSpawnMob
 *  net.minecraft.util.math.Vec3d
 *  net.minecraftforge.fml.common.eventhandler.SubscribeEvent
 */
package cascade.features.modules.exploit;

import cascade.Cascade;
import cascade.event.events.PacketEvent;
import cascade.features.modules.Module;
import cascade.features.setting.Setting;
import cascade.mixin.mixins.accessor.ITimer;
import cascade.util.misc.MathUtil;
import net.minecraft.client.entity.EntityPlayerSP;
import net.minecraft.entity.Entity;
import net.minecraft.network.Packet;
import net.minecraft.network.play.client.CPacketEntityAction;
import net.minecraft.network.play.client.CPacketInput;
import net.minecraft.network.play.client.CPacketPlayer;
import net.minecraft.network.play.client.CPacketPlayerAbilities;
import net.minecraft.network.play.client.CPacketPlayerDigging;
import net.minecraft.network.play.client.CPacketPlayerTryUseItem;
import net.minecraft.network.play.client.CPacketPlayerTryUseItemOnBlock;
import net.minecraft.network.play.client.CPacketUseEntity;
import net.minecraft.network.play.client.CPacketVehicleMove;
import net.minecraft.network.play.server.SPacketDestroyEntities;
import net.minecraft.network.play.server.SPacketDisconnect;
import net.minecraft.network.play.server.SPacketMoveVehicle;
import net.minecraft.network.play.server.SPacketSetPassengers;
import net.minecraft.network.play.server.SPacketSpawnMob;
import net.minecraft.util.math.Vec3d;
import net.minecraftforge.fml.common.eventhandler.SubscribeEvent;

public class EntityDesyc
extends Module {
    Setting<Boolean> clip = this.register(new Setting<Boolean>("Clip", true));
    Setting<Boolean> timer = this.register(new Setting<Boolean>("Timer", true));
    Setting<Boolean> cancel = this.register(new Setting<Boolean>("Cancel", true));
    Entity Riding = null;
    int[] array;
    int[] array2;

    public EntityDesyc() {
        super("EntityDesyc", Module.Category.EXPLOIT, "An exploit for godmode and dupe");
    }

    @Override
    public void onUpdate() {
        if (EntityDesyc.fullNullCheck() || this.Riding == null) {
            return;
        }
        if (this.Riding != null && EntityDesyc.mc.thePlayer.isRiding()) {
            return;
        }
        EntityDesyc.mc.thePlayer.onGround = true;
        if (EntityDesyc.mc.thePlayer.posY <= 3.0) {
            EntityDesyc.mc.thePlayer.setPosition(EntityDesyc.mc.thePlayer.posX, 69.0, EntityDesyc.mc.thePlayer.posZ);
            EntityDesyc.mc.thePlayer.posY = 69.0;
        }
        this.Riding.setPosition(EntityDesyc.mc.thePlayer.posX, EntityDesyc.mc.thePlayer.posY, EntityDesyc.mc.thePlayer.posZ);
        mc.getNetHandler().addToSendQueue((Packet)new CPacketVehicleMove(this.Riding));
    }

    @SubscribeEvent
    public void onPacketReceive(PacketEvent.Receive e) {
        SPacketSetPassengers setPassengers;
        Entity en;
        if (this.isDisabled() || EntityDesyc.fullNullCheck()) {
            return;
        }
        if (e.getPacket() instanceof SPacketSetPassengers && this.Riding != null && (en = EntityDesyc.mc.theWorld.getEntityByID((setPassengers = (SPacketSetPassengers)e.getPacket()).getEntityId())) == this.Riding) {
            setPassengers.getPassengerIds();
            for (int i : this.array) {
                Entity ent = EntityDesyc.mc.theWorld.getEntityByID(i);
                if (ent != EntityDesyc.mc.thePlayer) continue;
                return;
            }
            this.disable();
            return;
        }
        if (e.getPacket() instanceof SPacketDestroyEntities) {
            SPacketDestroyEntities destroyEntities = (SPacketDestroyEntities)e.getPacket();
            destroyEntities.getEntityIDs();
            for (int l_EntityId : this.array2) {
                if (l_EntityId != this.Riding.getEntityId()) continue;
                this.disable();
                return;
            }
        }
        if (e.getPacket() instanceof SPacketSpawnMob) {
            SPacketSpawnMob spawnMob = (SPacketSpawnMob)e.getPacket();
            if (this.Riding != null && this.Riding.getEntityId() == spawnMob.getEntityID()) {
                e.setCanceled(true);
            }
        }
        if (e.getPacket() instanceof SPacketMoveVehicle) {
            e.setCanceled(true);
        }
        if (e.getPacket() instanceof SPacketDisconnect) {
            this.disable();
            return;
        }
    }

    @SubscribeEvent
    public void onPacketSend(PacketEvent.Send e) {
        if (this.isDisabled() || EntityDesyc.fullNullCheck()) {
            return;
        }
        if (this.cancel.getValue().booleanValue() && (e.getPacket() instanceof CPacketInput || e.getPacket() instanceof CPacketPlayer || e.getPacket() instanceof CPacketPlayerAbilities || e.getPacket() instanceof CPacketPlayerDigging || e.getPacket() instanceof CPacketPlayerTryUseItem || e.getPacket() instanceof CPacketPlayerTryUseItemOnBlock || e.getPacket() instanceof CPacketEntityAction || e.getPacket() instanceof CPacketUseEntity || e.getPacket() instanceof CPacketVehicleMove)) {
            e.setCanceled(true);
        }
    }

    @Override
    public void onEnable() {
        Vec3d l_Direction;
        if (EntityDesyc.fullNullCheck()) {
            return;
        }
        if (!EntityDesyc.mc.thePlayer.isRiding()) {
            this.Riding = null;
            this.disable();
            return;
        }
        this.Riding = EntityDesyc.mc.thePlayer.getRidingEntity();
        EntityDesyc.mc.thePlayer.dismountRidingEntity();
        EntityDesyc.mc.theWorld.removeEntity(this.Riding);
        if (this.clip.getValue().booleanValue() && (l_Direction = MathUtil.direction(EntityDesyc.mc.thePlayer.rotationYaw)) != null) {
            EntityPlayerSP l_Entity = EntityDesyc.mc.thePlayer.isRiding() ? EntityDesyc.mc.thePlayer.getRidingEntity() : EntityDesyc.mc.thePlayer;
            l_Entity.setPosition(EntityDesyc.mc.thePlayer.posX + l_Direction.xCoord * 122.0, EntityDesyc.mc.thePlayer.posY - 30.0, EntityDesyc.mc.thePlayer.posZ + l_Direction.zCoord * 122.0);
        }
        if (this.timer.getValue().booleanValue()) {
            Cascade.timerManager.set(2.5f);
        }
    }

    @Override
    public void onDisable() {
        if (EntityDesyc.fullNullCheck()) {
            return;
        }
        EntityDesyc.mc.thePlayer.capabilities.isFlying = false;
        if (this.Riding != null) {
            this.Riding.isDead = false;
            if (!EntityDesyc.mc.thePlayer.isRiding()) {
                EntityDesyc.mc.theWorld.spawnEntityInWorld(this.Riding);
                EntityDesyc.mc.thePlayer.startRiding(this.Riding, true);
            }
            this.Riding = null;
        }
        if (this.timer.getValue().booleanValue() && ((ITimer)EntityDesyc.mc.timer).getTickLength() != 50.0f) {
            Cascade.timerManager.reset();
        }
    }
}

