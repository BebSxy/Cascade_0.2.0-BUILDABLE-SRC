/*
 * Decompiled with CFR 0.151.
 * 
 * Could not load the following classes:
 *  net.minecraft.block.material.Material
 *  net.minecraft.network.Packet
 *  net.minecraft.network.play.client.CPacketPlayer$PositionRotation
 *  net.minecraft.util.math.BlockPos
 */
package cascade.features.modules.exploit;

import cascade.features.modules.Module;
import cascade.features.setting.Setting;
import net.minecraft.block.material.Material;
import net.minecraft.network.Packet;
import net.minecraft.network.play.client.CPacketPlayer;
import net.minecraft.util.math.BlockPos;

public class Clip
extends Module {
    Setting<Bounds> bounds = this.register(new Setting<Bounds>("Bounds", Bounds.Zero));

    public Clip() {
        super("Clip", Module.Category.EXPLOIT, "cc clip");
    }

    @Override
    public void onUpdate() {
        if (Clip.fullNullCheck()) {
            return;
        }
        Clip.mc.thePlayer.setPositionAndUpdate((double)this.findX((int)Clip.mc.thePlayer.posX), Clip.mc.thePlayer.posY, (double)this.findZ((int)Clip.mc.thePlayer.posZ));
        mc.getNetHandler().addToSendQueue((Packet)new CPacketPlayer.PositionRotation((double)this.findX((int)Clip.mc.thePlayer.posX), Clip.mc.thePlayer.posY, (double)this.findZ((int)Clip.mc.thePlayer.posZ), Clip.mc.thePlayer.rotationYaw, Clip.mc.thePlayer.rotationPitch, true));
        if (this.bounds.getValue() != Bounds.None) {
            if (this.bounds.getValue() == Bounds.Zero) {
                mc.getNetHandler().addToSendQueue((Packet)new CPacketPlayer.PositionRotation(Clip.mc.thePlayer.posX, 0.0, Clip.mc.thePlayer.posZ, Clip.mc.thePlayer.rotationYaw, Clip.mc.thePlayer.rotationPitch, true));
            } else {
                mc.getNetHandler().addToSendQueue((Packet)new CPacketPlayer.PositionRotation(2.147483647E9, 0.0, 2.147483647E9, Clip.mc.thePlayer.rotationYaw, Clip.mc.thePlayer.rotationPitch, true));
            }
        }
    }

    int findX(int start) {
        int down = start;
        int playerX = (int)Clip.mc.thePlayer.posX;
        int playerY = (int)Clip.mc.thePlayer.posY;
        int playerZ = (int)Clip.mc.thePlayer.posZ;
        for (int i = start - 1; i <= 3; ++i) {
            if (!Clip.mc.theWorld.getBlockState((BlockPos)new BlockPos((int)i, (int)playerY, (int)playerZ)).getBlock().blockMaterial.equals(Material.air) || !Clip.mc.theWorld.getBlockState((BlockPos)new BlockPos((int)(i + 1), (int)playerY, (int)playerZ)).getBlock().blockMaterial.equals(Material.air) || Clip.mc.theWorld.getBlockState((BlockPos)new BlockPos((int)(i - 1), (int)playerY, (int)playerZ)).getBlock().blockMaterial.equals(Material.air)) continue;
            down = i;
            return down;
        }
        return down;
    }

    int findZ(int start) {
        int down = start;
        int playerX = (int)Clip.mc.thePlayer.posX;
        int playerY = (int)Clip.mc.thePlayer.posY;
        int playerZ = (int)Clip.mc.thePlayer.posZ;
        for (int i = start - 1; i <= 3; ++i) {
            if (!Clip.mc.theWorld.getBlockState((BlockPos)new BlockPos((int)playerZ, (int)playerY, (int)i)).getBlock().blockMaterial.equals(Material.air) || !Clip.mc.theWorld.getBlockState((BlockPos)new BlockPos((int)playerX, (int)playerY, (int)(i + 1))).getBlock().blockMaterial.equals(Material.air) || Clip.mc.theWorld.getBlockState((BlockPos)new BlockPos((int)playerX, (int)playerY, (int)(i + 1))).getBlock().blockMaterial.equals(Material.air)) continue;
            down = i;
            return down;
        }
        return down;
    }

    static enum Bounds {
        None,
        Phase,
        Zero;

    }
}

