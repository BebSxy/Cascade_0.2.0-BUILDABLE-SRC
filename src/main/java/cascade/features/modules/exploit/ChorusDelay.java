/*
 * Decompiled with CFR 0.151.
 * 
 * Could not load the following classes:
 *  net.minecraft.network.play.client.CPacketConfirmTeleport
 *  net.minecraft.network.play.client.CPacketPlayer
 *  net.minecraft.network.play.server.SPacketPlayerPosLook
 *  net.minecraftforge.fml.common.eventhandler.EventPriority
 *  net.minecraftforge.fml.common.eventhandler.SubscribeEvent
 */
package cascade.features.modules.exploit;

import cascade.Cascade;
import cascade.event.events.PacketEvent;
import cascade.features.modules.Module;
import cascade.mixin.mixins.accessor.ISPacketPlayerPosLook;
import net.minecraft.network.play.client.CPacketConfirmTeleport;
import net.minecraft.network.play.client.CPacketPlayer;
import net.minecraft.network.play.server.SPacketPlayerPosLook;
import net.minecraftforge.fml.common.eventhandler.EventPriority;
import net.minecraftforge.fml.common.eventhandler.SubscribeEvent;

public class ChorusDelay
extends Module {
    SPacketPlayerPosLook sPacketPlayerPosLook;

    public ChorusDelay() {
        super("ChorusDelay", Module.Category.EXPLOIT, "Manipulates your chorus");
    }

    @Override
    public void onEnable() {
        this.sPacketPlayerPosLook = null;
    }

    @Override
    public void onDisable() {
        if (this.sPacketPlayerPosLook != null && ChorusDelay.mc.thePlayer != null) {
            ChorusDelay.mc.thePlayer.setPosition(this.sPacketPlayerPosLook.x, this.sPacketPlayerPosLook.y, this.sPacketPlayerPosLook.z);
        }
    }

    @SubscribeEvent(priority=EventPriority.HIGHEST, receiveCanceled=true)
    public void onPacketReceive(PacketEvent.Receive e) {
        if (ChorusDelay.fullNullCheck() || this.isDisabled()) {
            return;
        }
        if (e.getPacket() instanceof SPacketPlayerPosLook) {
            try {
                SPacketPlayerPosLook packet = (SPacketPlayerPosLook)e.getPacket();
                this.sPacketPlayerPosLook = (SPacketPlayerPosLook)e.getPacket();
                ((ISPacketPlayerPosLook)packet).setX(((SPacketPlayerPosLook)e.getPacket()).getX());
                ((ISPacketPlayerPosLook)packet).setY(((SPacketPlayerPosLook)e.getPacket()).getY());
                ((ISPacketPlayerPosLook)packet).setZ(((SPacketPlayerPosLook)e.getPacket()).getZ());
                ((ISPacketPlayerPosLook)packet).setYaw(ChorusDelay.mc.thePlayer.rotationYaw);
                ((ISPacketPlayerPosLook)packet).setPitch(ChorusDelay.mc.thePlayer.rotationPitch);
            }
            catch (Exception ex) {
                Cascade.LOGGER.info("Caught an exception from ChorusDelay");
                ex.printStackTrace();
            }
        }
    }

    @SubscribeEvent(priority=EventPriority.HIGHEST, receiveCanceled=true)
    public void onPacketSend(PacketEvent.Send e) {
        if (ChorusDelay.fullNullCheck() || this.isDisabled()) {
            return;
        }
        if (e.getPacket() instanceof CPacketPlayer) {
            e.setCanceled(true);
        }
        if (e.getPacket() instanceof CPacketConfirmTeleport) {
            e.setCanceled(true);
        }
    }
}

